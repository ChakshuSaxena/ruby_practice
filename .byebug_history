exit
Fruit.testing_method
Fruit.my_class_method
exit
a.v('chakshu')
exit
f.v('chakshu')
'chakshu')
value
exit
 @v
value
exit
 puts f.v1
exit
 @v 
exit
xeit
  @v 
 puts f.v
exit
 @v 
exit
"a fruit of #{@kind} variety"
exit
  "a " + @condition +" "+ @kind 
 "a fruit of #{@kind} variety"
puts fruit.time_passes
exit
 def set_kind(k)
  @kind = k
exit
name
dragon_baby.name 
dragon_baby.name = "draby"
exit
@orangesPicked
@orangesCount
if @orangesPicked < @orangesCount
exit
 if @orangesPicked < @orangeCount
exit
@age_limit
exit
  puts "hi there I'm printing orange count: #{@orangesCount}"
exit
 puts"your #{@tree} " + " age is #{@age}"
exit
puts"your #{@tree} age is #{@age}"
continue
puts "no.of picked oranges after age increament : #{@orangesPicked}"
@orangesPicked = @orangesPicked + @orangesPicked
puts orangesCount
exit
 orangesCount = @orangesCount + (@age * 2)
puts "no. of oranges after age increament : #{orangesCount}"
exit
puts @orangesCount
exit
  @orangesCount = @orangesCount + (@age * 2)
       puts "no. of oranges after age increament : #{@orangesCount}"
exit
  puts "no. of oranges after age increament : #{orangesCount}"
exit
 orangesCount = @orangesCount + (@age * 2)
exit
puts "no.of picked oranges after age increament : #{@orangesPicked}"
  puts "no. of oranges after age increament : #{@orangesCount}"
exit
:        puts "no. of oranges after age increament : #{orangesCount}"
exit
  puts "no. of oranges after age increament : #{@orangesCount}"
exit
puts "no.of picked oranges after age increament : #{orangesPicked}
  @orangesCount = - @orangesCount + @orangesPicked
 @orangesPicked = @orangesPicked + @orangesPicked
  @orangesCount = @orangesCount + (@age * 2)
exit
@orangesCount = - @orangesCount + @orangesPicked
orangesPicked = @orangesPicked + @orangesPicked
 @orangesCount = @orangesCount + (@age * 2)
exit
@orangesCount = - @orangesCount + @orangesPicked
exit
 @orangesCount = - orangesCount + @orangesPicked
exit
@orangesCount
   @orangesCount = - @orangesCount + @orangesPicked
orangesPicked = @orangesPicked + @orangesPicked
exit
orangesLeft = - orangesCount + orangesPicked
exit
 orangesPicked = @orangesPicked + @orangesPicked
exit
orangesPicked = @orangesPicked + @orangesPicked
exit
# @orangesCount = - @orangesCount + @orangesPicked
 puts "no.of picked oranges after age increament : #{@orangesPicked}"
 puts "no. of oranges : #{@orangesCount}"
exit
 @orangesCount = - @orangesCount + @orangesPicked
@orangesPicked = @orangesPicked + @orangesPicked
 @orangesCount = @orangesCount + (@age * 2)
exit
@orangesCount = @orangesCount - @orangesPicked
@orangesPicked = @orangesPicked + @orangesPicked
 @orangesCount = @orangesCount + (@age * 2)
exit
 @orangesCount = @orangesCount + (@age * 2)
 @orangesCount =  @orangesPicked - @orangesCount 
exit
@orangesCount = @orangesCount - @orangesPicked
@orangesPicked = @orangesPicked + @orangesPicked
 @orangesCount = @orangesCount + (@age * 2)
exit
  puts englishNumber(1000)
 numString = numString + 'one thousand'
exit
 numString = numString + 'one thousand'
exit
englishNumber(1000)
exit
colorHash['strings']  = 'red'
 colorHash['numbers']  = 'green'
exit
time = Time.mkTime(1996,5,15)
exit
   arr[j+1] = swap
arr[j] = arr[j+1]
swap = arr[j]
exit
    8:             arr[i+1] = swapexit
    7:             arr[i] = arr[i+1]
swap = arr[i]
exit
doubleThis.num
exit
 doubleThis num
exit
puts chapter.ljust(40/2) + n.rjust(40/2)
exit
chapter.ljust(40/2) + chapter.rjust(40/2)
exit
 chapter.ljust(40/2) + index.rjust(40/2)
exit
chapter.ljust 40
exit
fruits.last  
exit
exist
dob.to_i
currentYear.to_i
exit
noOfYear
